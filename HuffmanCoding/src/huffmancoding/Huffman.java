/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package huffmancoding;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import java.util.PriorityQueue;
import java.util.Comparator;
import java.util.HashMap;

// comparator class helps to compare the node
// on the basis of one of its attribute.
// Here we will be compared
// on the basis of data values of the nodes.
class MyComparator implements Comparator<Node> {

    public int compare(Node x, Node y) {

        return x.freqeuncy - y.freqeuncy;
    }
}

public class Huffman {
    // recursive function to print the
    // huffman-code through the tree traversal.
    // Here s is the huffman - code generated.
    private static void getEncoded(Node root, String s) {

        // base case; if the left and right are null
        // then its a leaf node and we print
        // the code s generated by traversing the tree.
        if (root.left == null && root.right == null && Character.isLetter(root.c)) {
            // c is the character in the node
            root.encoded = s;
            System.out.println(root.c + ":" + root.encoded);
            return;
        }

        // if we go to left then add "0" to the code.
        // if we go to the right add"1" to the code.
        // recursive calls for left and
        // right sub-tree of the generated tree.
        getEncoded(root.left, s + "0");
        getEncoded(root.right, s + "1");
    }

    // main function
    public static void createHuffmanTree(char[] charArray, int[] charfreq) {;
        // creating a priority queue q.
        // makes a min-priority queue(min-heap)
        int n = charArray.length;
        PriorityQueue<Node> q = new PriorityQueue<Node>(n, new MyComparator());

        for (int i = 0; i < n; i++) {

            // creating a Huffman node object
            // and add it to the priority queue.
            Node hn = new Node(charArray[i], charfreq[i]);

            // add functions adds the huffman node to the queue.
            q.add(hn);
        }

        // create a root node
        Node root = null;

        // Here we will extract the two minimum value
        // from the heap each time until
        // its size reduces to 1, extract until
        // all the nodes are extracted.
        while (q.size() > 1) {

            // first min extract.
            Node x = q.peek();
            q.poll();

            // second min extarct.
            Node y = q.peek();
            q.poll();

            // new node f which is equal
            Node f = new Node();

            // to the sum of the frequency of the two nodes
            // assigning values to the f node.
            f.freqeuncy = x.freqeuncy + y.freqeuncy;
            f.c = '-';

            // first extracted node as left child.
            f.left = x;

            // second extracted node as the right child.
            f.right = y;

            // marking the f node as the root node.
            root = f;

            // add this node to the priority-queue.
            q.add(f);
        }

        // print the codes by traversing the tree
        System.out.println("\nThe code for each character:");
        getEncoded(root, "");
        createDictionary(root);
    }
    
    private static HashMap<String,String> dict = new HashMap<>();
    private static void createDictionary(Node root) {
        if (root.left == null && root.right == null && Character.isLetter(root.c)) {
            dict.put(root.c + "", root.encoded);
            return;
        }
        createDictionary(root.left);
        createDictionary(root.right);
    }
    
    public static void encode(char[] str) {
        String encode = "";
        for (char ch : str) {
            if (ch != ' ') {
                encode += Huffman.dict.get(ch+"") + "|";
                
            } else {
                encode += " |";
            }
        }
        System.out.println("\n\nThe origin text: ");
        System.out.println(str);
        System.out.println("\t|\n\t|\n\t|\n\tV");
        System.out.printf("The encoded text:\n%s\b\n",encode);
    }
}
